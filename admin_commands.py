import json
import html
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import ContextTypes
from user_repository import UserRepository
from google_sheets import GoogleSheets

with open('config.json', 'r') as file:
    config = json.load(file)
from datetime import datetime
from regular_repository import RegularPostRepository
ADMIN_ID = config['ADMIN_ID']
from telegram.constants import ParseMode

google_sheets = GoogleSheets('credentials.json', 'BeautifulBodyBotData')
UserRepo = UserRepository(google_sheets)
RegularPostRepo = RegularPostRepository()

async def admin_send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    photo_id = update.message.photo[-1].file_id
    context.user_data['photo_id'] = photo_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º photo_id –≤ user_data
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin_send —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /admin_send_regular —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º")

async def admin_send_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if not update.message.video:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return

    video_id = update.message.video.file_id
    context.user_data['video_id'] = video_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º video_id –≤ user_data
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin_send —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /admin_send_regular —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º. \nfile_id: {video_id}")

async def send_regular_posts(context: ContextTypes.DEFAULT_TYPE):
    users = UserRepo.get_all_users()
    now = datetime.now()

    for user in users:
        user_id = user.user_id
        workout_choice = user.workout_choice  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ë–î

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if not workout_choice:
            continue

        start_date = datetime.fromtimestamp(user.start_date)
        hours_since_join = round((now - start_date).total_seconds() // 3600)
       # hours_since_join = 1  # –î–ª—è —Ç–µ—Å—Ç–∞. –£–±—Ä–∞—Ç—å —ç—Ç–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ[]'4re5748

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        series_posts = RegularPostRepo.get_post_for_hours(hours_since_join)

        if not series_posts:
            continue  # –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        for series_post in series_posts:
            post_workout_choice = series_post.get('workout_choice')

            # –ï—Å–ª–∏ –ø–æ—Å—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤—Å–µ–º
            if post_workout_choice != "–í—Å–µ–º" and post_workout_choice != workout_choice:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –Ω–µ –¥–ª—è –≤—Å–µ—Ö

            message = series_post['message']
            photo_id = series_post.get('photo_id')
            video_id = series_post.get('video_id')

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
                if photo_id:
                    await context.bot.send_photo(chat_id=user_id, photo=photo_id, caption=message, parse_mode=ParseMode.HTML)
                elif video_id:
                    await context.bot.send_video(chat_id=user_id, video=video_id, caption=message, parse_mode=ParseMode.HTML)
                else:
                    await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.HTML)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                UserRepo.update_user_status_to_false(user_id)

# async def send_regular_posts(context: ContextTypes.DEFAULT_TYPE, workout_choice=0):
#     users = UserRepo.get_all_users()
#     now = datetime.now()
#
#     for user in users:
#         if workout_choice == 1 and user.workout_choice != 'üßò‚Äç‚ôÄÔ∏è –û—Å–∞–Ω–∫–∞':
#             continue
#         if workout_choice == 2 and user.workout_choice != 'ü§∏‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ü–µ–ª–ª—é–ª–∏—Ç–∞':
#             continue
#
#         user_id = user.user_id
#         start_date = datetime.fromtimestamp(user.start_date)
#         hours_since_join = round((now - start_date).total_seconds() // 3600)
#         hours_since_join = 1
#         print(f'User {user_id} joined {hours_since_join} hours ago.')
#         series_posts = RegularPostRepo.get_post_for_hours(hours_since_join)
#
#         if series_posts:
#             for series_post in series_posts:
#
#                 post_workout_choice = series_post.get('workout_choice')  # –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ workout_choice –≤ –ø–æ—Å—Ç—ã
#                 if post_workout_choice and post_workout_choice != user.workout_choice:
#                     continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
#
#                 message = series_post['message']
#                 photo_id = series_post.get('photo_id')
#                 video_id = series_post.get('video_id')
#
#                 try:
#                     if photo_id:
#                         await context.bot.send_photo(chat_id=user_id, photo=photo_id, caption=message,
#                                                      parse_mode=ParseMode.HTML)
#                     elif video_id:
#                         await context.bot.send_video(chat_id=user_id, video=video_id, caption=message,
#                                                      parse_mode=ParseMode.HTML)
#                     else:
#                         await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.HTML)
#                 except Exception as e:
#                     print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
#                     UserRepo.update_user_status_to_false(user_id)

async def admin_send_regular(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)

    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if len(context.args) < 3:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (0 - –≤—Å–µ–º, 1 - –æ—Å–∞–Ω–∫–∞, 2 - —Ü–µ–ª–ª—é–ª–∏—Ç).")
        return

    try:
        hours = int(context.args[-2])
        workout_choice = int(context.args[-1])
        message = ' '.join(context.args[:-2])
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏ –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (0 - –≤—Å–µ–º, 1 - –æ—Å–∞–Ω–∫–∞, 2 - —Ü–µ–ª–ª—é–ª–∏—Ç).")
        return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π workout_choice –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π
    workout_choice_text = ''
    if workout_choice == 0:
        workout_choice_text = '–í—Å–µ–º'
    elif workout_choice == 1:
        workout_choice_text = 'üßò‚Äç‚ôÄÔ∏è –û—Å–∞–Ω–∫–∞'
    elif workout_choice == 2:
        workout_choice_text = 'ü§∏‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ü–µ–ª–ª—é–ª–∏—Ç–∞'
    else:
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0 - –≤—Å–µ–º, 1 - –æ—Å–∞–Ω–∫–∞, 2 - —Ü–µ–ª–ª—é–ª–∏—Ç.")
        return

    context.user_data['regular_message'] = message
    context.user_data['regular_hours'] = hours
    context.user_data['workout_choice'] = workout_choice_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    if 'photo_id' in context.user_data:
        media_id = context.user_data['photo_id']
        RegularPostRepo.insert_post(hours, message, photo_id=media_id, workout_choice=workout_choice_text)
    elif 'video_id' in context.user_data:
        media_id = context.user_data['video_id']
        RegularPostRepo.insert_post(hours, message, video_id=media_id, workout_choice=workout_choice_text)
    else:
        RegularPostRepo.insert_post(hours, message, workout_choice=workout_choice_text)

    await update.message.reply_text(
        f"–†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours} —á–∞—Å–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {workout_choice}.")

async def admin_delete_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    try:
        post_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    RegularPostRepo.delete_post(post_id)
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

async def admin_delete_all_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    RegularPostRepo.delete_all_posts()
    await update.message.reply_text(f"–í—Å–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã")

async def admin_get_regular(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    posts = RegularPostRepo.get_all_posts()
    if not posts:
        await update.message.reply_text("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    response = "–°–ø–∏—Å–æ–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n\n"
    for post in posts:
        post_id, message, workout_choice = post
        response += f"ID: {post_id}, –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_choice}, –¢–µ–∫—Å—Ç: {message[:50]}...\n"  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è

    await update.message.reply_text(response)

async def admin_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if user_id != ADMIN_ID:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    if len(context.args) == 0:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    message = update.message.text[len('/admin_send '):]
    context.user_data['message'] = message

    # Check if a photo or video is present
    if 'photo_id' in context.user_data:
        media_id = context.user_data['photo_id']
        media_type = 'photo'
    elif 'video_id' in context.user_data:
        media_id = context.user_data['video_id']
        media_type = 'video'
    else:
        media_id = None
        media_type = None

    # Create the reply markup with buttons
    reply_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 1 –Ω–µ–¥–µ–ª–∏", callback_data='send_7'),
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 3 –Ω–µ–¥–µ–ª—å", callback_data='send_21'),
            InlineKeyboardButton("–ú–µ–Ω–µ–µ 4 –Ω–µ–¥–µ–ª—å", callback_data='send_28'),
            InlineKeyboardButton("–ë–æ–ª–µ–µ 4 –Ω–µ–¥–µ–ª—å", callback_data='send_29')
        ],
        [InlineKeyboardButton("–í—Å–µ–º", callback_data='send_1')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='delete')]
    ])

    # Send the media or the message based on availability
    if media_type == 'photo':
        await update.message.reply_photo(photo=media_id, caption=message, parse_mode=ParseMode.HTML)
    elif media_type == 'video':
        await update.message.reply_video(video=media_id, caption=message, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    # Ask the admin to select the user group for broadcasting
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞:", reply_markup=reply_markup)


async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('send_'):
        days_ago = int(query.data.split('_')[1])
        message = context.user_data['message']
        users = []

        # Fetch the appropriate user list based on days_ago
        if days_ago == 7:
            users = UserRepo.get_less_then_users(7)
        elif days_ago == 21:
            users = UserRepo.get_less_then_users(21)
        elif days_ago == 28:
            users = UserRepo.get_less_then_users(28)
        elif days_ago == 29:
            users = UserRepo.get_more_then_users(28)
        elif days_ago == 1:
            users = UserRepo.get_all_users2()

        # Send either a photo, video, or text message to the users
        if 'photo_id' in context.user_data:
            photo_id = context.user_data['photo_id']
            for user in users:
                user_id = user
                try:
                    await context.bot.send_photo(chat_id=user_id, photo=photo_id, caption=message, parse_mode=ParseMode.HTML)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    UserRepo.update_user_status_to_false(user_id)
        elif 'video_id' in context.user_data:
            video_id = context.user_data['video_id']
            for user in users:
                user_id = user
                try:
                    await context.bot.send_video(chat_id=user_id, video=video_id, caption=message, parse_mode=ParseMode.HTML)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    UserRepo.update_user_status_to_false(user_id)
        else:
            for user in users:
                user_id = user
                try:
                    await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.HTML)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    UserRepo.update_user_status_to_false(user_id)

        # Notify the admin that the message was successfully sent
        await context.bot.send_message(chat_id=query.message.chat_id, text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    elif query.data == 'delete':
        # Clear user data and notify that sending was canceled
        await context.bot.send_message(chat_id=query.message.chat_id, text="–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ.")
        context.user_data.clear()