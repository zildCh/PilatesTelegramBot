import os
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters , ConversationHandler
import requests
from admin_commands import admin_send_photo,admin_send_video, admin_send_message, handle_confirmation, send_regular_posts, admin_send_regular, admin_get_regular, admin_delete_post, admin_delete_all_posts
from user_repository import UserRepository
from user import User
from PIL import Image
from google_sheets import GoogleSheets
def load_config(filename):
    with open(filename, 'r') as file:
        return json.load(file)

config = load_config('config.json')

TOKEN = config['TOKEN']
CHANNEL_ID = config['CHANNEL_ID']
INVITE_LINK = config['INVITE_LINK']
ADMIN_ID = config['ADMIN_ID']
USERS_FILE = config['USERS_FILE']
google_sheets = GoogleSheets('credentials.json', 'AleksandraPilatesBotData')
repo = UserRepository(google_sheets)




# WORKOUT_VIDEOS = {
#     'button_workout_1': 'https://www.youtube.com/watchv?v=PbWnEIp5TME',
#     'button_workout_2': 'https://www.youtube.com/watch?v=qiS3PIPsRhs',
# }
# WORKOUT_NAMES = {
#     'button_workout_1': 'üßò‚Äç‚ôÄÔ∏è –û—Å–∞–Ω–∫–∞',
#     'button_workout_2': 'ü§∏‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ü–µ–ª–ª—é–ª–∏—Ç–∞',
# }
WORKOUT_NAMES = {
    'button_workout_1': 'üßò‚Äç‚ôÄÔ∏è –û—Å–∞–Ω–∫–∞',
    'button_workout_2': 'ü§∏‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ü–µ–ª–ª—é–ª–∏—Ç–∞',
}

WORKOUT_VIDEOS = {
    'button_workout_1': {
        'telegram': 'BAACAgIAAxkBAANuZvF-GFq8iq-DWsOm4cf1zseJZ4AAAhNcAAL19ZBLZtDGuSFuXBw2BA',  # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –Ω–∞ Telegram (—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ ID —Ñ–∞–π–ª–∞)
        'youtube': 'https://www.youtube.com/watch?v=PbWnEIp5TME',
        'vk': 'https://vk.com/video-127960182_456239022'
    },
    'button_workout_2': {
        'telegram': 'BAACAgIAAxkBAAN5ZvGJvR0iq2XH4uCdrIex3GrhdU0AAjNdAAL19ZBL27_7QL6GIHk2BA',  # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –Ω–∞ Telegram
        'youtube': 'https://www.youtube.com/watch?v=qiS3PIPsRhs',
        'vk': 'https://vk.com/video-127960182_456239022'
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user_id = update.message.from_user.id
    # username = update.message.from_user.username
    # user = User(user_id, username)
    # repo.add_user(user)
    #repo.save_all_users_to_google_sheets()
    #repo.delete_user(493470036)
    keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='button_get_training')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.',
                                    reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'button_get_training':
        keyboard = [[InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data='button_check_subscription')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id,
                               text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: \n[–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ß—É–ø—Ä–∞–∫–æ–≤–∞ | –æ—Å–∞–Ω–∫–∞ | –ø–∏–ª–∞—Ç–µ—Å]({INVITE_LINK}) \n\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                               reply_markup=reply_markup, parse_mode= "Markdown")
    elif query.data == 'button_check_subscription':
        await check_subscription(update, context)
    elif query.data.startswith('button_workout_'):
        await update_workout_selection(update, context, query.data)

async def check_subscription_status(user_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f'https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={CHANNEL_ID}&user_id={user_id}'
    response = requests.get(url)
    data = response.json()

    if data['ok']:
        status = data['result']['status']
        if status in ['member', 'administrator', 'creator']:
            return True
    return False

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    is_subscribed = await check_subscription_status(user_id)

    if is_subscribed:
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        keyboard = [
            [InlineKeyboardButton(f"{WORKOUT_NAMES['button_workout_1']}", callback_data='button_workout_1')],
            [InlineKeyboardButton(f"{WORKOUT_NAMES['button_workout_2']}", callback_data='button_workout_2')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=reply_markup)
    else:
        await query.message.reply_text("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def send_workout_options(update: Update, context: ContextTypes.DEFAULT_TYPE, workout_key):
    query = update.callback_query
    workout_name = WORKOUT_NAMES.get(workout_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –≤ Telegram", callback_data=f'telegram_{workout_key}')],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube", callback_data=f'youtube_{workout_key}')],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö", callback_data=f'vk_{workout_key}')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
    await context.bot.send_message(chat_id=query.message.chat_id,
                                   text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_name}", reply_markup=reply_markup)

async def update_workout_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, workout_key):
    query = update.callback_query
    user_id = query.from_user.id
    username = query.from_user.username
    remaining_workout = WORKOUT_NAMES[workout_key]

    user = User(user_id=user_id, username=username, workout_choice=remaining_workout)
    repo.add_user(user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    new_keyboard = [[InlineKeyboardButton(f"{remaining_workout}", callback_data=workout_key)]]
    reply_markup = InlineKeyboardMarkup(new_keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    await context.bot.edit_message_reply_markup(
        chat_id=query.message.chat_id,
        message_id=query.message.message_id,
        reply_markup=reply_markup
    )
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    await send_workout_options(update, context, workout_key)


async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    service = data[0]
    workout_key = '_'.join(data[1:])

    workout_data = WORKOUT_VIDEOS.get(workout_key)

    if workout_data:
        if service == 'telegram':
            telegram_video = workout_data.get('telegram')
            if telegram_video:
                await context.bot.send_video(chat_id=query.message.chat_id, video=telegram_video, caption="–í–æ—Ç –≤–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!")
        elif service == 'youtube':
            youtube_link = workout_data.get('youtube')
            if youtube_link:
                await context.bot.send_message(chat_id=query.message.chat_id, text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube: {youtube_link}")
        elif service == 'vk':
            vk_link = workout_data.get('vk')
            if vk_link:
                await context.bot.send_message(chat_id=query.message.chat_id, text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö: {vk_link}")
    else:
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


# async def send_workout_link(update: Update, context: ContextTypes.DEFAULT_TYPE, workout_key):
#     query = update.callback_query
#     user_id = query.from_user.id
#     workout_link = WORKOUT_VIDEOS.get(workout_key)
#     if workout_link:
#         workout_name = WORKOUT_NAMES.get(workout_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
#
#
#         await context.bot.send_message(chat_id=query.message.chat_id, text=f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {workout_link}")
#
#         # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
#         if query.message.chat_id in context.user_data and context.user_data[query.message.chat_id]['edited'] is False:
#             try:
#                 keyboard = InlineKeyboardMarkup(
#                     [[InlineKeyboardButton(workout_name, callback_data=f'button_workout_{workout_key.split("_")[1]}')]])
#                 await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id,
#                                                             message_id=context.user_data[query.message.chat_id][
#                                                                 'message_id'],
#                                                             reply_markup=keyboard)
#
#                 # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
#                 context.user_data[query.message.chat_id]['edited'] = True
#             except Exception as e:
#                 print(f"Error editing message: {e}")
#     else:
#         await context.bot.send_message(chat_id=query.message.chat_id, text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞")

async def periodic_task(context: ContextTypes.DEFAULT_TYPE):
    await send_regular_posts(context)

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button, pattern='^button_'))

    application.add_handler(CommandHandler("admin_send", admin_send_message))
    application.add_handler(MessageHandler(filters.PHOTO & filters.User(int(ADMIN_ID)), admin_send_photo))
    application.add_handler(MessageHandler(filters.VIDEO & filters.User(int(ADMIN_ID)), admin_send_video))
    application.add_handler(CallbackQueryHandler(handle_service_selection, pattern='^(telegram|youtube|vk)_'))

    application.add_handler(CommandHandler("admin_send_regular", admin_send_regular))
    application.add_handler(CommandHandler("admin_delete_post", admin_delete_post))
    application.add_handler(CommandHandler("admin_delete_all_posts", admin_delete_all_posts))
    application.add_handler(CommandHandler("admin_get_regular", admin_get_regular))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CallbackQueryHandler(handle_confirmation))

    application.job_queue.run_repeating(periodic_task, interval=3600, first=0)

    application.run_polling()


if __name__ == '__main__':
    main()