import os
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters , ConversationHandler
import requests
from admin_commands import admin_send_photo, admin_send_message, handle_confirmation, send_regular_posts, admin_send_regular, admin_get_regular, admin_delete_post
from user_repository import UserRepository
from user import User
from PIL import Image

# # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
# TOKEN = '7475676929:AAENOqRV9rdtnL-WoEb3WHTNi-oIkuq1zA4'
# CHANNEL_ID = '@pilates_123_test'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
# #ADMIN_ID = '493470036'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∞
# ADMIN_ID = '1393684504'
# USERS_FILE = 'users.json'

def load_config(filename):
    with open(filename, 'r') as file:
        return json.load(file)

config = load_config('config.json')

TOKEN = config['TOKEN']
CHANNEL_ID = config['CHANNEL_ID']
ADMIN_ID = config['ADMIN_ID']
USERS_FILE = config['USERS_FILE']

repo = UserRepository()

WORKOUT_VIDEOS = {
    'button_workout_1': 'https://www.youtube.com/watch?v=PbWnEIp5TME',
    'button_workout_2': 'https://www.youtube.com/watch?v=qiS3PIPsRhs',
}
WORKOUT_NAMES = {
    'button_workout_1': 'üßò‚Äç‚ôÄÔ∏è –û—Å–∞–Ω–∫–∞',
    'button_workout_2': 'ü§∏‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ü–µ–ª–ª—é–ª–∏—Ç–∞',
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    user = User(user_id, username)
    repo.add_user(user)
    #repo.delete_user(493470036)
    keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='button_get_training')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.',
                                    reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'button_get_training':
        keyboard = [[InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data='button_check_subscription')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {CHANNEL_ID}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                       reply_markup=reply_markup)
    elif query.data == 'button_check_subscription':
        await check_subscription(update, context)
    elif query.data.startswith('button_workout_'):
        await send_workout_link(update, context, query.data)

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = CHANNEL_ID
    url = f'https://api.telegram.org/bot{TOKEN}/getChatMember?chat_id={chat_id}&user_id={user_id}'

    response = requests.get(url)
    data = response.json()

    if data['ok']:
        status = data['result']['status']
        if status in ['member', 'administrator', 'creator']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
            await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(f"{WORKOUT_NAMES['button_workout_1']}", callback_data='button_workout_1')],
                [InlineKeyboardButton(f"{WORKOUT_NAMES['button_workout_2']}", callback_data='button_workout_2')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = await context.bot.send_message(chat_id=query.message.chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", reply_markup=reply_markup)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            context.user_data[user_id] = {
                'message_id': message.message_id,
                'edited': False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            }
        else:
            await query.message.reply_text("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_workout_link(update: Update, context: ContextTypes.DEFAULT_TYPE, workout_key):
    query = update.callback_query
    workout_link = WORKOUT_VIDEOS.get(workout_key)
    if workout_link:
        workout_name = WORKOUT_NAMES.get(workout_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {workout_link}")

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if query.message.chat_id in context.user_data and context.user_data[query.message.chat_id]['edited'] is False:
            try:
                keyboard = InlineKeyboardMarkup(
                    [[InlineKeyboardButton(workout_name, callback_data=f'button_workout_{workout_key.split("_")[1]}')]])
                await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id,
                                                            message_id=context.user_data[query.message.chat_id][
                                                                'message_id'],
                                                            reply_markup=keyboard)

                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
                context.user_data[query.message.chat_id]['edited'] = True
            except Exception as e:
                print(f"Error editing message: {e}")
    else:
        await context.bot.send_message(chat_id=query.message.chat_id, text="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞")

async def periodic_task(context: ContextTypes.DEFAULT_TYPE):
    await send_regular_posts(context)

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button, pattern='^button_'))

    application.add_handler(CommandHandler("admin_send", admin_send_message))
    application.add_handler(MessageHandler(filters.PHOTO & filters.User(int(ADMIN_ID)), admin_send_photo))

    application.add_handler(CommandHandler("admin_send_regular", admin_send_regular))
    application.add_handler(CommandHandler("admin_delete_post", admin_delete_post))
    application.add_handler(CommandHandler("admin_get_regular", admin_get_regular))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CallbackQueryHandler(handle_confirmation))

    application.job_queue.run_repeating(periodic_task, interval=3600, first=0)

    application.run_polling()


if __name__ == '__main__':
    main()